<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:ignore="http://www.ignore.com"
        xmlns:avalonDock="http://schemas.xceed.com/wpf/xaml/avalondock"
        xmlns:Data="clr-namespace:TriggerPoint.Data" x:Class="TriggerPoint.MainWindow"
        xmlns:views="clr-namespace:TriggerPoint.Views"
        mc:Ignorable="d ignore"
      d:DesignHeight="900"
    d:DesignWidth="1900"
    WindowState="Maximized"
        Title="TriggerPoint">

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Skins/MainSkin.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <Style x:Key="DockingManagerStyle1" TargetType="{x:Type avalonDock:DockingManager}">
                <Setter Property="DocumentPaneControlStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type avalonDock:LayoutDocumentPaneControl}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type avalonDock:LayoutDocumentPaneControl}">
                                        <Grid ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="*"/>
                                            </Grid.RowDefinitions>
                                            <Border Background="Transparent" Grid.RowSpan="2"/>
                                            <Grid Panel.ZIndex="1">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition/>
                                                    <ColumnDefinition Width="Auto"/>
                                                </Grid.ColumnDefinitions>
                                                <avalonDock:DocumentPaneTabPanel x:Name="HeaderPanel" Grid.Column="0" FlowDirection="LeftToRight" IsItemsHost="True" Margin="2,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1"/>
                                                <avalonDock:DropDownButton x:Name="MenuDropDownButton" Grid.Column="1" Focusable="False">
                                                    <avalonDock:DropDownButton.DropDownContextMenu>
                                                        <avalonDock:ContextMenuEx>
                                                            <avalonDock:ContextMenuEx.ItemContainerStyle>
                                                                <Style TargetType="{x:Type avalonDock:MenuItemEx}">
                                                                    <Setter Property="HeaderTemplate" Value="{Binding Root.Manager.DocumentPaneMenuItemHeaderTemplate}"/>
                                                                    <Setter Property="HeaderTemplateSelector" Value="{Binding Root.Manager.DocumentPaneMenuItemHeaderTemplateSelector}"/>
                                                                    <Setter Property="IconTemplate" Value="{Binding Root.Manager.IconContentTemplate}"/>
                                                                    <Setter Property="IconTemplateSelector" Value="{Binding Root.Manager.IconContentTemplateSelector}"/>
                                                                    <Setter Property="Command">
                                                                        <Setter.Value>
                                                                            <Binding Path=".">
                                                                                <Binding.Converter>
                                                                                    <avalonDock:ActivateCommandLayoutItemFromLayoutModelConverter/>
                                                                                </Binding.Converter>
                                                                            </Binding>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                    <Style.BasedOn>
                                                                        <Style TargetType="{x:Type MenuItem}">
                                                                            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                                                                            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}"/>
                                                                            <Setter Property="Background" Value="Transparent"/>
                                                                            <Setter Property="BorderBrush" Value="Transparent"/>
                                                                            <Setter Property="BorderThickness" Value="1"/>
                                                                            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                                                                            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                                                                            <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                                                                            <Style.Triggers>
                                                                                <Trigger Property="Role" Value="TopLevelHeader">
                                                                                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                                                                                    <Setter Property="Padding" Value="6,0"/>
                                                                                </Trigger>
                                                                                <Trigger Property="Role" Value="TopLevelItem">
                                                                                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                                                                                    <Setter Property="Padding" Value="6,0"/>
                                                                                </Trigger>
                                                                                <Trigger Property="Role" Value="SubmenuHeader">
                                                                                    <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
                                                                                </Trigger>
                                                                            </Style.Triggers>
                                                                        </Style>
                                                                    </Style.BasedOn>
                                                                </Style>
                                                            </avalonDock:ContextMenuEx.ItemContainerStyle>
                                                        </avalonDock:ContextMenuEx>
                                                    </avalonDock:DropDownButton.DropDownContextMenu>
                                                    <avalonDock:DropDownButton.Style>
                                                        <Style TargetType="{x:Type ToggleButton}">
                                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                                                            <Setter Property="Padding" Value="2"/>
                                                            <Setter Property="BorderThickness" Value="1"/>
                                                            <Setter Property="Background" Value="Transparent"/>
                                                            <Setter Property="BorderBrush" Value="Transparent"/>
                                                            <Setter Property="HorizontalAlignment" Value="Center"/>
                                                            <Setter Property="VerticalAlignment" Value="Center"/>
                                                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                                                            <Setter Property="Template">
                                                                <Setter.Value>
                                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                                        </Border>
                                                                        <ControlTemplate.Triggers>
                                                                            <Trigger Property="IsChecked" Value="True">
                                                                                <Setter Property="BorderBrush" Value="#80DADADA"/>
                                                                                <Setter Property="Background" Value="#400080FF"/>
                                                                            </Trigger>
                                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                                <Setter Property="BorderBrush" Value="#80DADADA"/>
                                                                                <Setter Property="Background" Value="#210080FF"/>
                                                                            </Trigger>
                                                                            <Trigger Property="IsKeyboardFocused" Value="True">
                                                                                <Setter Property="BorderBrush" Value="#80DADADA"/>
                                                                                <Setter Property="Background" Value="#210080FF"/>
                                                                            </Trigger>
                                                                            <MultiTrigger>
                                                                                <MultiTrigger.Conditions>
                                                                                    <Condition Property="IsMouseOver" Value="True"/>
                                                                                    <Condition Property="IsChecked" Value="True"/>
                                                                                </MultiTrigger.Conditions>
                                                                                <Setter Property="BorderBrush" Value="#90006CD9"/>
                                                                                <Setter Property="Background" Value="#400080FF"/>
                                                                            </MultiTrigger>
                                                                            <MultiTrigger>
                                                                                <MultiTrigger.Conditions>
                                                                                    <Condition Property="IsKeyboardFocused" Value="True"/>
                                                                                    <Condition Property="IsChecked" Value="True"/>
                                                                                </MultiTrigger.Conditions>
                                                                                <Setter Property="BorderBrush" Value="#90006CD9"/>
                                                                                <Setter Property="Background" Value="#400080FF"/>
                                                                            </MultiTrigger>
                                                                            <Trigger Property="IsPressed" Value="True">
                                                                                <Setter Property="BorderBrush" Value="#90006CD9"/>
                                                                                <Setter Property="Background" Value="#400080FF"/>
                                                                            </Trigger>
                                                                            <Trigger Property="IsEnabled" Value="False">
                                                                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                                                            </Trigger>
                                                                        </ControlTemplate.Triggers>
                                                                    </ControlTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Style>
                                                    </avalonDock:DropDownButton.Style>
                                                    <Image>
                                                        <Image.Source>
                                                            <BitmapImage UriSource="pack://application:,,,/Xceed.Wpf.AvalonDock;component/Themes/Generic/Images/PinDocMenu.png"/>
                                                        </Image.Source>
                                                    </Image>
                                                </avalonDock:DropDownButton>
                                            </Grid>
                                            <Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" HorizontalAlignment="Stretch" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Cycle" VerticalAlignment="Stretch">
                                                <ContentPresenter x:Name="PART_SelectedContentHost" ContentTemplate="{TemplateBinding SelectedContentTemplate}" Content="{TemplateBinding SelectedContent}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            </Border>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                            </Trigger>
                                            <DataTrigger Binding="{Binding Model.ChildrenCount, RelativeSource={RelativeSource Self}}" Value="0">
                                                <Setter Property="Visibility" TargetName="MenuDropDownButton" Value="Collapsed"/>
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="ItemContainerStyle">
                                <Setter.Value>
                                    <Style TargetType="{x:Type TabItem}">
                                        <Setter Property="BorderBrush" Value="Transparent"></Setter>
                                        <Setter Property="BorderThickness" Value="0"></Setter>
                                        <Setter Property="Visibility">
                                            <Setter.Value>
                                                <Binding Path="IsVisible">
                                                    <Binding.Converter>
                                                        <avalonDock:BoolToVisibilityConverter/>
                                                    </Binding.Converter>
                                                </Binding>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                                        <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
                                    </Style>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="ItemTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <avalonDock:LayoutDocumentTabItem Style="{x:Null}"  BorderBrush="Transparent" BorderThickness="0" Model="{Binding}"  Foreground="{StaticResource Gray}" FontSize="16" FontWeight="Bold" FontFamily="Segoe Ui Light"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <avalonDock:LayoutDocumentControl Model="{Binding}"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="AnchorablePaneControlStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type avalonDock:LayoutAnchorablePaneControl}">
                            <Setter Property="TabStripPlacement" Value="Bottom"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type avalonDock:LayoutAnchorablePaneControl}">
                                        <Grid ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <Border Background="Transparent" Grid.RowSpan="2"/>
                                            <Border x:Name="ContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="0" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Cycle">
                                                <ContentPresenter x:Name="PART_SelectedContentHost" ContentTemplate="{TemplateBinding SelectedContentTemplate}" Content="{TemplateBinding SelectedContent}" ContentStringFormat="{TemplateBinding SelectedContentStringFormat}" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            </Border>
                                            <avalonDock:AnchorablePaneTabPanel x:Name="HeaderPanel" FlowDirection="LeftToRight" IsItemsHost="True" Margin="2,0,2,2" Grid.Row="1" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="ItemContainerStyle">
                                <Setter.Value>
                                    <Style TargetType="{x:Type TabItem}">
                                        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                                        <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type TabControl}}}" Value="1">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="ItemTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <avalonDock:LayoutAnchorableTabItem Model="{Binding}"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <avalonDock:LayoutAnchorableControl Model="{Binding}"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="AnchorSideTemplate">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type avalonDock:LayoutAnchorSideControl}">
                            <ItemsControl>
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel IsItemsHost="True">
                                            <StackPanel.Orientation>
                                                <Binding Path="Model.Side" RelativeSource="{RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type avalonDock:LayoutAnchorSideControl}}">
                                                    <Binding.Converter>
                                                        <avalonDock:AnchorSideToOrientationConverter/>
                                                    </Binding.Converter>
                                                </Binding>
                                            </StackPanel.Orientation>
                                        </StackPanel>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="AnchorGroupTemplate">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type avalonDock:LayoutAnchorGroupControl}">
                            <ItemsControl>
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel IsItemsHost="True" Orientation="Horizontal"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.LayoutTransform>
                                    <RotateTransform>
                                        <RotateTransform.Angle>
                                            <Binding Path="Model.Parent.Side" RelativeSource="{RelativeSource TemplatedParent}">
                                                <Binding.Converter>
                                                    <avalonDock:AnchorSideToAngleConverter/>
                                                </Binding.Converter>
                                            </Binding>
                                        </RotateTransform.Angle>
                                    </RotateTransform>
                                </ItemsControl.LayoutTransform>
                            </ItemsControl>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="AnchorTemplate">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type avalonDock:LayoutAnchorControl}">
                            <Border BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" BorderThickness="1" Margin="2" Padding="2">
                                <ContentPresenter ContentTemplate="{Binding AnchorableHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type avalonDock:DockingManager}}}" Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="DocumentHeaderTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="AnchorableHeaderTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Image x:Name="icon" Stretch="Uniform">
                                    <Image.Source>
                                        <Binding Path="IconSource">
                                            <Binding.Converter>
                                                <avalonDock:NullToDoNothingConverter/>
                                            </Binding.Converter>
                                        </Binding>
                                    </Image.Source>
                                </Image>
                                <TextBlock x:Name="title" Grid.Column="1" Margin="4,0,0,0" Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
                            </Grid>
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding IconSource}" Value="{x:Null}">
                                    <Setter Property="Margin" TargetName="title" Value="0"/>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="DocumentTitleTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="AnchorableTitleTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="AnchorableContextMenu">
                    <Setter.Value>
                        <ContextMenu>
                            <MenuItem Command="{Binding FloatCommand}" Header="Float"/>
                            <MenuItem Command="{Binding DockCommand}" Header="Dock"/>
                            <MenuItem Command="{Binding DockAsDocumentCommand}" Header="Dock as Tabbed Document"/>
                            <MenuItem Command="{Binding AutoHideCommand}" Header="Auto Hide"/>
                            <MenuItem Command="{Binding HideCommand}" Header="Hide">
                                <MenuItem.Visibility>
                                    <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                                        <Binding.Converter>
                                            <avalonDock:BoolToVisibilityConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </MenuItem.Visibility>
                            </MenuItem>
                        </ContextMenu>
                    </Setter.Value>
                </Setter>
                <Setter Property="DocumentContextMenu">
                    <Setter.Value>
                        <ContextMenu>
                            <MenuItem Command="{Binding CloseCommand}" Header="Close">
                                <MenuItem.Visibility>
                                    <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                                        <Binding.Converter>
                                            <avalonDock:BoolToVisibilityConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </MenuItem.Visibility>
                            </MenuItem>
                            <MenuItem Command="{Binding CloseAllButThisCommand}" Header="Close All But This"/>
                            <MenuItem Command="{Binding FloatCommand}" Header="Float"/>
                            <MenuItem Command="{Binding DockAsDocumentCommand}" Header="Dock as Tabbed Document"/>
                            <MenuItem Command="{Binding NewHorizontalTabGroupCommand}" Header="New Horizontal Tab Group">
                                <MenuItem.Visibility>
                                    <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                                        <Binding.Converter>
                                            <avalonDock:BoolToVisibilityConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </MenuItem.Visibility>
                            </MenuItem>
                            <MenuItem Command="{Binding NewVerticalTabGroupCommand}" Header="New Vertical Tab Group">
                                <MenuItem.Visibility>
                                    <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                                        <Binding.Converter>
                                            <avalonDock:BoolToVisibilityConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </MenuItem.Visibility>
                            </MenuItem>
                            <MenuItem Command="{Binding MoveToNextTabGroupCommand}" Header="Move To Next Tab Group">
                                <MenuItem.Visibility>
                                    <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                                        <Binding.Converter>
                                            <avalonDock:BoolToVisibilityConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </MenuItem.Visibility>
                            </MenuItem>
                            <MenuItem Command="{Binding MoveToPreviousTabGroupCommand}" Header="Move To Previous Tab Group">
                                <MenuItem.Visibility>
                                    <Binding Mode="OneWay" Path="IsEnabled" RelativeSource="{RelativeSource Self}">
                                        <Binding.Converter>
                                            <avalonDock:BoolToVisibilityConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </MenuItem.Visibility>
                            </MenuItem>
                        </ContextMenu>
                    </Setter.Value>
                </Setter>
                <Setter Property="DocumentPaneMenuItemHeaderTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="IconContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Image Stretch="Uniform">
                                <Image.Source>
                                    <Binding Path="IconSource">
                                        <Binding.Converter>
                                            <avalonDock:NullToDoNothingConverter/>
                                        </Binding.Converter>
                                    </Binding>
                                </Image.Source>
                            </Image>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type avalonDock:DockingManager}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                                <Grid FlowDirection="LeftToRight">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <ContentPresenter Content="{TemplateBinding LayoutRootPanel}" Grid.Column="1" Grid.Row="1"/>
                                    <ContentPresenter Content="{TemplateBinding RightSidePanel}" Grid.Column="2" Grid.Row="1"/>
                                    <ContentPresenter Content="{TemplateBinding LeftSidePanel}" Grid.Column="0" Grid.Row="1"/>
                                    <ContentPresenter Content="{TemplateBinding TopSidePanel}" Grid.Column="1" Grid.Row="0"/>
                                    <ContentPresenter Content="{TemplateBinding BottomSidePanel}" Grid.Column="1" Grid.Row="2"/>
                                    <ContentPresenter x:Name="PART_AutoHideArea" Content="{TemplateBinding AutoHideWindow}" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Grid.Row="1" VerticalAlignment="{TemplateBinding VerticalAlignment}"/>
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Window.Resources>

    <Window.DataContext>
        <Binding Path="Main" Source="{StaticResource Locator}"/>
    </Window.DataContext>

    <Grid x:Name="LayoutRoot">

        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition/>
            <RowDefinition Height="25"/>
        </Grid.RowDefinitions>


        <Menu Foreground="{StaticResource White}" Background="{StaticResource Gray}" BorderBrush="{StaticResource Gray}" Style="{StaticResource menustyle}">
            <MenuItem Header="_File"   Click="MenuItem_Click">
                <MenuItem Command="{Binding PopupWindow}" CommandParameter="{x:Type views:AddFormula}" Header="_Trace Indicator"/>
                <MenuItem Command="{Binding ChangeDatabase}" Header="_Change Database"/>
                <MenuItem Command="{Binding Exit}" Header="_Exit"/>
            </MenuItem>
            <MenuItem Header="_Indicators">
                <MenuItem Command="{Binding PopupWindow}" CommandParameter="{x:Type views:MACD}" Header="_MACD"/>
                <MenuItem Command="{Binding PopupWindow}" CommandParameter="{x:Type views:RSI}" Header="_RSI"/>
                <MenuItem Command="{Binding PopupWindow}" CommandParameter="{x:Type views:Average}" Header="_Average"/>
                <MenuItem Command="{Binding PopupWindow}" CommandParameter="{x:Type views:Stochastic}" Header="_Stochastic"/>
                <MenuItem Command="{Binding PopupWindow}" CommandParameter="{x:Type views:BollingerBand}" Header="Bollinger Band"/>
                <MenuItem Command="{Binding PopupWindow}" CommandParameter="{x:Type views:Swing}" Header="_Swing"/>
                <MenuItem Header="_User Define Formula"/>
            </MenuItem>
            <MenuItem Header="_Tools">
                <MenuItem Header="Portfolio _Master" Command="{Binding PopupWindow}" CommandParameter="{x:Type views:PortfolioMaster}" />
                <MenuItem Header="_Profiles"/>
                <MenuItem Header="_Data Split/Merge" Command="{Binding PopupWindow}" CommandParameter="{x:Type views:MergeSplitView}"/>
                <MenuItem Header="_Settings"/>
                <MenuItem Header="_Column Selection" Command="{Binding PopupWindow}" CommandParameter="{x:Type views:IndicatorColumns}"/>
                <MenuItem Header="_Color Options" Command="{Binding PopupWindow}" CommandParameter="{x:Type views:ThemeColor}"/>
                <MenuItem Header="_Data Deletion" Command="{Binding PopupWindow}" CommandParameter="{x:Type views:DataDeletion}"/>
            </MenuItem>
            <MenuItem Header="_Help">
                <MenuItem Header="_About"/>
            </MenuItem>

        </Menu>

        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
        <views:Clock />
            <Image Source="Assets/logo.png" />
        </StackPanel>
        <avalonDock:DockingManager Grid.Row="1"  x:Name="dockingManager"  BorderBrush="{StaticResource Gray}" BorderThickness="2" Style="{DynamicResource DockingManagerStyle1}" >
            <avalonDock:DockingManager.AnchorableContextMenu>
                <ContextMenu>
                    <StackPanel/>
                </ContextMenu>
            </avalonDock:DockingManager.AnchorableContextMenu>
            <avalonDock:DockingManager.ContextMenu>
                <ContextMenu>
                    <StackPanel>
                    </StackPanel>
                </ContextMenu>
            </avalonDock:DockingManager.ContextMenu>
            <avalonDock:LayoutRoot>
                <avalonDock:LayoutPanel Orientation="Horizontal">
                    <avalonDock:LayoutDocumentPaneGroup>
                        <avalonDock:LayoutDocumentPane>
                            <avalonDock:LayoutDocument Title="Home" >
                                <TextBox BorderBrush="{StaticResource Gray}"/>
                            </avalonDock:LayoutDocument>
                        </avalonDock:LayoutDocumentPane>
                    </avalonDock:LayoutDocumentPaneGroup>
                </avalonDock:LayoutPanel>
            </avalonDock:LayoutRoot>
        </avalonDock:DockingManager>

        <views:StatusBarView Grid.Row="2"/>
    </Grid>
</Window>
